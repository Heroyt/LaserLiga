parameters:
	auth:
		userClass: 'App\Models\Auth\User'
	routing:
		routeFiles:
			- %constants.appDir%routes
		controllers:
			- %constants.appDir%src/Controllers
	redis:
		host: liga-redis
extensions:
	caching: Nette\Bridges\CacheDI\CacheExtension(%constants.tempDir%)
	orisai.console: OriNette\Console\DI\ConsoleExtension
	orisai.scheduler: OriNette\Scheduler\DI\SchedulerExtension
orisai.scheduler:
	console:
		script: '%constants.appDir%bin/console'
	errorHandler: tracy
	jobs:
		logArchive:
			expression: 0 6 * * *
			callback: [@cron.logArchive, 'run']
services:
	- App\Services\Maths\RegressionCalculator
	- App\Services\PushService

	redis:
		create: \Redis
		setup:
			- connect(%redis.host%)

	regression.evo5: App\GameModels\Tools\Evo5\RegressionStatCalculator

	caching.journal: Lsr\Core\Caching\RedisJournal(@redis)
	cache.storage: Lsr\Core\Caching\RedisStorage(@redis, '', @caching.journal)
	cache: Lsr\Core\Caching\Cache(@cache.storage, null, %constants.debug%)

	avatars: App\Services\Avatar\AvatarService

	user: App\Models\Auth\User
	rankCalculator: App\Services\Player\RankCalculator

	playerUser: App\Services\Player\PlayerUserService
	playerRankOrder: App\Services\Player\PlayerRankOrderService
	playerDistribution: App\Services\PlayerDistribution\PlayerDistributionService
	playerGamesTogether: App\Services\Player\PlayersGamesTogetherService
	playerStatsProvider: App\Services\Player\PlayerStatsProvider

	mailer: Nette\Mail\SendmailMailer
	mail: App\Services\MailService

	image: App\Services\ImageService

	evo5HighlightChecker:
		type: App\Services\GameHighlight\Evo5HighlightChecker
		tags:
			- highlightChecker
	userHighlightChecker:
		type: App\Services\GameHighlight\UserHighlightChecker
		tags:
			- highlightChecker
	hitsHighlightChecker:
		type: App\Services\GameHighlight\HitsHighlightChecker
		tags:
			- highlightChecker
	trophyHighlightChecker:
		type: App\Services\GameHighlight\TrophyHighlightChecker
		tags:
			- highlightChecker

	gameHighlight: App\Services\GameHighlight\GameHighlightService(tagged(highlightChecker))
	achievementChecker: App\Services\Achievements\AchievementChecker
	achievementProvider: App\Services\Achievements\AchievementProvider
	titleProvider: App\Services\Achievements\TitleProvider
	eventRegistration: App\Services\EventRegistrationService

	cron.logArchive: App\Cron\LogArchiveJob

	result.parser: App\Tools\ResultParsing\ResultsParser
	result.parser.evo5: App\Tools\ResultParsing\Evo5\ResultsParser
	result.parser.evo6: App\Tools\ResultParsing\Evo6\ResultsParser

search:
	achievementCheckers:
		in: %constants.appDir%/src/Services/Achievements/Checkers
		implements:
			- App\Services\Achievements\CheckerInterface
		tags:
			- achievementChecker