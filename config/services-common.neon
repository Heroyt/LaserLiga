includes:
	- console.neon
	- local.neon
	- symfony.neon
	- cqrs.neon
	- jobs.neon
parameters:
	db:
		driver: mysqli
		lazy: true
		host: db
		port: 3306
		collate: utf8mb4
		database: lac
		user: root
		password: 'laser-arena-control'
	auth:
		userClass: 'App\Models\Auth\User'
	templating:
		tmpPath: '%constants.tempDir%latte'
extensions:
	cache: Lsr\Caching\DI\CacheExtension
	decorator: Nette\DI\Extensions\DecoratorExtension
	inject: Nette\DI\Extensions\InjectExtension
	routing: Lsr\Core\Routing\DI\RoutingExtension
	di: Nette\DI\Extensions\DIExtension
	search: Nette\DI\Extensions\SearchExtension(%constants.tempDir%)
di:
	lazy: true
services:
	# Core
	db.connection: Lsr\Db\Connection(config: %db%)
	app: Lsr\Core\App
	translations:
		create: Lsr\Core\Translations
		arguments:
			config: @config
			defaultLang: 'cs_CZ'
			supportedLanguages:
				- 'cs_CZ'
				- 'en_US'
				- 'de_DE'
				- 'fr_FR'
				- 'sk_SK'
			textDomains:
				- 'results'
				- 'tips'
				- 'cli'
				- 'highlights'
				- 'tournament'
				- 'privacy'
				- 'music'

	- App\Services\Maths\RegressionCalculator
	- App\Services\PushService

	redis:
		create: \Redis
		setup:
			- connect(%redis.host%)

	turnstile: App\Services\Turnstile(secret: %turnstile.secret%, key: %turnstile.key%, enabled: %turnstile.enabled%)

	regression.evo5: App\GameModels\Tools\Lasermaxx\RegressionStatCalculator

	cache.journal: Lsr\Caching\Redis\RedisJournal(@redis)
	cache.storage: Lsr\Caching\Redis\RedisStorage(@redis, '', @cache.journal)

	avatars: App\Services\Avatar\AvatarService

	user: App\Models\Auth\User
	rankCalculator: App\Services\Player\RankCalculator

	userRegistration: App\Services\UserRegistrationService
	playerUser: App\Services\Player\PlayerUserService
	playerRankOrder: App\Services\Player\PlayerRankOrderService
	playerDistribution: App\Services\PlayerDistribution\PlayerDistributionService
	playerGamesTogether: App\Services\Player\PlayersGamesTogetherService
	playerStatsProvider: App\Services\Player\PlayerStatsProvider
	playersProvider: App\Services\Player\PlayerProvider

	mailer: Nette\Mail\SendmailMailer
	mail: App\Services\MailService

	image: App\Services\ImageService

	evo5HighlightChecker:
		type: App\Services\GameHighlight\Checkers\Evo5HighlightChecker
		tags:
			- highlightChecker
	userHighlightChecker:
		type: App\Services\GameHighlight\Checkers\UserHighlightChecker
		tags:
			- highlightChecker
	hitsHighlightChecker:
		type: App\Services\GameHighlight\Checkers\HitsHighlightChecker
		tags:
			- highlightChecker
	deathsHighlightChecker:
		type: App\Services\GameHighlight\Checkers\DeathsHighlightChecker
		tags:
			- highlightChecker
	trophyHighlightChecker:
		type: App\Services\GameHighlight\Checkers\TrophyHighlightChecker
		tags:
			- highlightChecker

	gameHighlight: App\Services\GameHighlight\GameHighlightService(tagged(highlightChecker))
	achievementChecker: App\Services\Achievements\AchievementChecker
	achievementProvider: App\Services\Achievements\AchievementProvider
	playerAchievementChecker: App\Services\Achievements\PlayerAchievementChecker
	titleProvider: App\Services\Achievements\TitleProvider
	eventRegistration: App\Services\EventRegistrationService
	arenaStats: App\Services\ArenaStatsAggregator
	gameModeProvider: App\Services\GameModeProvider

	result.parser: Lsr\Lg\Results\ResultsParser(['evo5' => @result.parser.evo5, 'evo6' => @result.parser.evo6])
	results.generator: Lsr\Lg\Results\ResultsGenerator(['evo5' => @result.generator.evo5, 'evo6' => @result.generator.evo6])
	results.logger: Lsr\Logging\Logger(%logger.dir%, 'results')
	result.parser.evo5: App\Tools\ResultParsing\Evo5\ResultsParser(gameClass: App\GameModels\Game\Evo5\Game, logger: @results.logger)
	result.parser.evo6: App\Tools\ResultParsing\Evo6\ResultsParser(gameClass: App\GameModels\Game\Evo6\Game, logger: @results.logger)
	result.generator.evo5: Lsr\Lg\Results\LaserMaxx\Evo5\ResultsGenerator
	result.generator.evo6: Lsr\Lg\Results\LaserMaxx\Evo6\ResultsGenerator

	thumbnails: App\Services\Thumbnails\ThumbnailGenerator
	fontawesome: App\Services\FontAwesomeManager

	templating.latte.lac:
		create: App\Latte\LacExtension
		tags:
			- templating
	templating.latte.engine:
		setup:
			- addExtension(@templating.latte.lac)
search:
	achievementCheckers:
		in: %constants.appDir%/src/Services/Achievements/Checkers
		implements:
			- App\Services\Achievements\CheckerInterface
		tags:
			- achievementChecker

decorator:
	Lsr\Core\Controllers\Controller:
		inject: true

cache:
	cacheDir: %constants.tempDir%

routing:
	routeFiles:
		- %constants.appDir%routes
	controllers:
		- %constants.appDir%src/Controllers